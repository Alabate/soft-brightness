# -*- meson -*-
m4_changequote(`{',`}')m4_dnl
m4_changecom({})m4_dnl
m4_define({gse_project},
{# AUTOGENERATED FILE - DO NOT EDIT
# This file has been generated from meson-gse/meson.build.m4 and meson-gse.build

# meson-gse - Library for gnome-shell extensions
# Copyright (C) 2019 Philippe Troin <phil@fifi.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Boilerplate
project('$1',
	version: '$3',
	meson_version: '>= 0.44.0',
	license: 'GPL3' )

gnome = import('gnome')
i18n  = import('i18n')

gse_lib_convenience = files('meson-gse/lib/convenience.js')
gse_lib_logger      = files('meson-gse/lib/logger.js')

gse_gettext_domain  = meson.project_name()
gse_sources	    = files('src/extension.js')
gse_libs	    = []
gse_data	    = []
gse_schemas	    = []
gse_dbus_interfaces = []

gse_sources_prefs   = files('src/prefs.js')
if gse_sources_prefs != []
  gse_sources += gse_sources_prefs
endif

gse_data_stylesheet = files('src/stylesheet.css')
if gse_data_stylesheet != []
  gse_data += gse_data_stylesheet
endif

gse_schema_main = files('schemas/org.gnome.shell.extensions.'+ meson.project_name() + '.gschema.xml')
if gse_schema_main != []
  gse_schemas += gse_schema_main
endif

# Include extension-specific settings
$4m4_dnl
# End of extension-specific settings

# Boilerplate
run_home = run_command('sh', '-c', 'echo $HOME')
if run_home.returncode() != 0
  error('HOME not found, exit=@0@'.format(run_home.returncode()))
endif
home     = run_home.stdout().strip()

gse_uuid		 = meson.project_name() + '@$2'
gse_target_dir		 = home + '/.local/share/gnome-shell/extensions/' + gse_uuid
gse_target_dir_schemas   = join_paths(gse_target_dir, 'schemas')
gse_target_locale_dir    = join_paths(gse_target_dir, 'locale')
gse_target_dir_dbus_intf = join_paths(gse_target_dir, 'dbus-interfaces')

meson_extra_scripts      = 'meson-gse/meson-scripts'

gse_metadata_conf = configuration_data()
git_rev_cmd = run_command('git', 'rev-parse', 'HEAD')
if git_rev_cmd.returncode() != 0
  warning('git rev-parse exit=@0@'.format(git_rev_cmd.returncode()))
  gse_metadata_conf.set('VCS_TAG', 'unknown')
else
  gse_metadata_conf.set('VCS_TAG', git_rev_cmd.stdout().strip())
endif
gse_metadata_conf.set('uuid', gse_uuid)
gse_metadata_conf.set('version', meson.project_version())
gse_metadata_conf.set('gettext_domain', gse_gettext_domain)

gse_data += configure_file(input:         'src/metadata.json.in',
				 output:        'metadata.json',
				 configuration: gse_metadata_conf)

# This should work but doesn't:
#gse_metadata = vcs_tag(command:  ['git', 'rev-parse', 'HEAD'],
#			     input:    files('metadata.json.in'),
#			     output:   'metadata.json',
#			     fallback: 'unknown')
#gse_data += gse_metadata

custom_target('gse-gschemas.compiled',
	      build_by_default: true,
	      command:          ['sh', '-c', 'glib-compile-schemas --targetdir . $(dirname @INPUT0@)'],
	      input:            gse_schemas,
	      output:           'gschemas.compiled',
	      install:          true,
	      install_dir:      gse_target_dir_schemas)
install_data(gse_schemas,
	     install_dir: gse_target_dir_schemas)

install_data(gse_sources + gse_data + gse_libs,
	     install_dir: gse_target_dir)

install_data(gse_dbus_interfaces,
	     install_dir: gse_target_dir_dbus_intf)

custom_target('gse-extension.zip',
	      build_by_default: false,
	      install: false,
	      command: [files(join_paths(meson_extra_scripts, 'make-extension')), gse_target_dir, '@OUTDIR@', '@OUTPUT@'],
	      output:  'extension.zip')

subdir('po')})
